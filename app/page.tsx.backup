"use client"

import { useState, useEffect, useRef, useMemo } from "react"
import { useWallet } from "@solana/wallet-adapter-react"
import { WalletMultiButton } from "@solana/wallet-adapter-react-ui"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import PasswordGate from "@/components/password-gate"
import ContributionForm from "@/components/contribution-form"
import { PookieScene } from "@/components/pookie-scene"
import Link from "next/link"
import { ImageIcon, ChevronUpIcon, ChevronDownIcon } from "lucide-react"
import { motion, AnimatePresence } from "framer-motion"
import type { ButtonProps } from "@/components/ui/button"
import { playSound } from "@/hooks/use-audio"

// Click sound path
const CLICK_SOUND_PATH = '/sounds/click-sound.wav'

// Sound-enabled button that plays click sound on press
const SoundButton = ({ onClick, ...props }: ButtonProps & { onClick?: () => void }) => {
  const handleClick = () => {
    playSound(CLICK_SOUND_PATH, 0.5)
    if (onClick) onClick()
  }
  
  return <Button {...props} onClick={handleClick} />
}

export default function Home() {
  const { connected } = useWallet()
  const [isPasswordVerified, setIsPasswordVerified] = useState(false)
  const [showPresale, setShowPresale] = useState(false)
  const [showPasswordForm, setShowPasswordForm] = useState(false)
  const [minimized, setMinimized] = useState(false)
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 })
  const [isClient, setIsClient] = useState(false)
  const [velocity, setVelocity] = useState(0)
  const trailRef = useRef<{ x: number; y: number; timestamp: number }[]>([])
  const prevPosition = useRef({ x: 0, y: 0 })
  const rafRef = useRef<number | null>(null)
  
  // Set isClient to true on component mount to prevent hydration mismatch
  useEffect(() => {
    setIsClient(true)
  }, [])
  
  // More efficient cursor tracking with requestAnimationFrame
  useEffect(() => {
    let lastMousePosition = { x: 0, y: 0 };
    let isMoving = false;
    
    const handleMouseMove = (event: MouseEvent) => {
      lastMousePosition = {
        x: event.clientX,
        y: event.clientY
      };
      isMoving = true; 
    };
    
    const updateMousePosition = () => {
      if (isMoving) {
        const dx = lastMousePosition.x - prevPosition.current.x;
        const dy = lastMousePosition.y - prevPosition.current.y;
        const currentVelocity = Math.sqrt(dx * dx + dy * dy) * 0.1;
        
        setMousePosition(lastMousePosition);
        setVelocity(Math.min(currentVelocity, 8));
        
        // Only add trail points when moving with some velocity
        if (currentVelocity > 0.5) {
          const now = Date.now();
          trailRef.current.push({ 
            ...lastMousePosition, 
            timestamp: now
          });
          
          // Keep fewer points for a shorter trail
          trailRef.current = trailRef.current
            .filter(point => now - point.timestamp < 150)
            .slice(-3);
        }
        
        prevPosition.current = lastMousePosition;
        isMoving = false;
      }
      
      rafRef.current = requestAnimationFrame(updateMousePosition);
    };
    
    window.addEventListener('mousemove', handleMouseMove);
    rafRef.current = requestAnimationFrame(updateMousePosition);
    
    return () => {
      window.removeEventListener('mousemove', handleMouseMove);
      if (rafRef.current) {
        cancelAnimationFrame(rafRef.current);
      }
    };
  }, []);

  // Memoize gradient definition to avoid recreation
  const gradientDef = useMemo(() => (
    <defs>
      <radialGradient id="auraGradient" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
        <stop offset="0%" stopColor="#00ff88" stopOpacity="0.6" />
        <stop offset="70%" stopColor="#00ff88" stopOpacity="0" />
      </radialGradient>
    </defs>
  ), []);

  // Don't render custom cursor or animations until client-side
  if (!isClient) {
    return (
      <div className="h-screen w-screen">
        <div className="w-full h-full bg-background flex items-center justify-center">
          <div className="text-primary">Loading...</div>
        </div>
      </div>
    )
  }

  return (
    <div className="relative h-screen w-screen overflow-hidden flex flex-col">
      {/* Simplified aura effect - optimized for performance */}
      <svg className="fixed top-0 left-0 w-full h-full pointer-events-none z-50">
        {gradientDef}
        
        {/* Main aura circle around the cursor - more optimized */}
        {mousePosition.x > 0 && (
          <circle
            cx={mousePosition.x}
            cy={mousePosition.y}
            r={25 + velocity * 1.5}
            fill="url(#auraGradient)"
            style={{ filter: 'blur(6px)' }}
          />
        )}
        
        {/* Reduced particle count for better performance */}
        {trailRef.current.map((point, i) => {
          // Size based on position in trail (newer points are larger)
          const size = 4 - i;
          
          return (
            <circle
              key={`p-${point.timestamp}`}
              cx={point.x}
              cy={point.y}
              r={size}
              fill="#00ff88"
              opacity={0.3}
            />
          );
        })}
      </svg>

      {/* 3D Scene as Background - takes up the full screen */}
      <div className="absolute inset-0 z-0">
        <PookieScene />
      </div>

      {/* Header - with subtle animation */}
      <motion.header 
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="relative z-10 w-full border-b border-primary/20 bg-background/50 backdrop-blur supports-[backdrop-filter]:bg-background/30"
      >
        <div className="container flex h-14 items-center justify-between py-2">
          <motion.div 
            className="flex items-center gap-2"
            whileHover={{ scale: 1.05 }}
            transition={{ type: "spring", stiffness: 400, damping: 10 }}
          >
            <span className="text-xl font-bold text-primary text-glow">$POOKIE</span>
          </motion.div>
          <div className="flex items-center gap-3">
            <motion.div 
              whileHover={{ scale: 1.1 }} 
              whileTap={{ scale: 0.95 }}
              onClick={() => playSound(CLICK_SOUND_PATH, 0.5)}
            >
              <Link href="/gallery">
                <Button className="h-8 border-primary/30 text-primary hover:bg-primary/10 animate-glow">
                  <ImageIcon size={16} />
                </Button>
              </Link>
            </motion.div>
            <motion.div 
              whileHover={{ scale: 1.05 }} 
              whileTap={{ scale: 0.95 }}
              onClick={() => playSound(CLICK_SOUND_PATH, 0.5)}
            >
              <WalletMultiButton className="bg-primary text-primary-foreground hover:bg-primary/90 rounded-md px-3 py-1 h-8" />
            </motion.div>
          </div>
        </div>
      </motion.header>

      {/* Main Content - empty to allow full interaction with the 3D model */}
      <div className="relative z-10 flex-1"></div>

      {/* Sale Box - with animations */}
      <AnimatePresence>
        {!isPasswordVerified && !showPresale && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 20 }}
            transition={{ duration: 0.5 }}
            className="absolute bottom-8 left-0 right-0 mx-auto z-10 max-w-[500px] w-[calc(100%-2rem)]"
          >
            <div className="glass p-3 rounded-lg border-glow shadow-glow overflow-hidden">
              <div className="flex justify-between items-start">
                <div className="flex-1">
                  <h2 className="text-xl font-bold text-primary text-glow">$POOKIE Presale</h2>
                  <p className="text-sm text-foreground/80 mb-1">
                    PookieMafia is waiting. $Pookie presale will be live till 24hrs before launch
                  </p>
                </div>
                <div className="ml-2">
                  <div className="text-primary font-bold animate-pulse text-right">LIVE</div>
                  <div className="text-xs font-semibold inline-block text-foreground/60 text-right">
                    350 / 750 SOL
                  </div>
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-4 mb-2 mt-1">
                <div className="space-y-1">
                  <div className="flex justify-between text-sm">
                    <span>Price:</span>
                    <span className="font-bold">0.5 - 3 SOL</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span>Your Cap:</span>
                    <span className="font-bold">{isPasswordVerified ? "3 SOL" : "0.5 SOL"}</span>
                  </div>
                </div>
                <div className="space-y-1">
                  <div className="flex justify-between text-sm">
                    <span>Raised:</span>
                    <span className="font-bold">152.4 SOL</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span>Progress:</span>
                    <span className="font-bold text-primary">45%</span>
                  </div>
                </div>
              </div>

              <div className="relative mb-3">
                <div className="overflow-hidden h-2 mb-1 text-xs flex rounded-full bg-background/50">
                  <motion.div 
                    style={{ width: "45%" }}
                    className="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-primary"
                    initial={{ width: "0%" }}
                    animate={{ width: "45%" }}
                    transition={{ duration: 1, delay: 0.5 }}
                  />
                </div>
              </div>
              
              <div className="flex space-x-2">
                {showPasswordForm ? (
                  <div className="w-full">
                    <PasswordGate 
                      onVerified={() => {
                        setIsPasswordVerified(true);
                        setShowPasswordForm(false);
                        playSound(CLICK_SOUND_PATH, 0.5);
                      }} 
                    />
                    <Button 
                      className="text-xs p-0 h-6 mt-1" 
                      onClick={() => {
                        setShowPasswordForm(false);
                        playSound(CLICK_SOUND_PATH, 0.5);
                      }}
                    >
                      Cancel
                    </Button>
                  </div>
                ) : (
                  <>
                    {!isPasswordVerified && (
                      <motion.div 
                        whileHover={{ scale: 1.02 }}
                        whileTap={{ scale: 0.98 }}
                        className="w-1/3"
                      >
                        <Button 
                          className="w-full border border-primary/50 text-primary font-medium bg-background/40 hover:bg-primary/10 shadow-sm h-10" 
                          onClick={() => {
                            setShowPasswordForm(true);
                            playSound(CLICK_SOUND_PATH, 0.5);
                          }}
                        >
                          Unlock 3 SOL Cap
                        </Button>
                      </motion.div>
                    )}
                    <motion.div 
                      whileHover={{ scale: 1.03 }}
                      whileTap={{ scale: 0.98 }}
                      className={isPasswordVerified ? "w-full" : "w-2/3"}
                    >
                      <Button 
                        className="w-full bg-primary hover:bg-primary/90 text-primary-foreground shadow-md hover:shadow-lg transition-all duration-200 animate-pulse-glow h-10" 
                        onClick={() => {
                          setShowPresale(true);
                          playSound(CLICK_SOUND_PATH, 0.5);
                        }}
                      >
                        Enter Presale
                      </Button>
                    </motion.div>
                  </>
                )}
              </div>
            </div>
          </motion.div>
        )}
        
        {showPresale && (
          <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 20 }}
            transition={{ duration: 0.5 }}
            className="absolute bottom-8 left-0 right-0 mx-auto z-10 max-w-[500px] w-[calc(100%-2rem)]"
          >
            <div className="glass p-3 rounded-lg border-glow shadow-glow overflow-hidden">
              <div className="flex justify-between items-center mb-2">
                <h2 className="text-lg font-bold text-primary text-glow">Contribute to $POOKIE</h2>
                <motion.div 
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <Button 
                    className="h-7 px-2 text-xs" 
                    onClick={() => {
                      setShowPresale(false);
                      playSound(CLICK_SOUND_PATH, 0.5);
                    }}
                  >
                    Back
                  </Button>
                </motion.div>
              </div>
              
              <div className="flex items-start gap-4">
                <div className="w-1/2">
                  <p className="text-xs text-muted-foreground mb-2">
                    You can contribute up to <span className="text-primary font-bold">{isPasswordVerified ? "3" : "0.5"} SOL</span> to the presale.
                  </p>
                  {!isPasswordVerified && (
                    <div className="text-xs text-muted-foreground mb-2">
                      <Button 
                        className="text-xs p-0 h-6 text-primary" 
                        onClick={() => {
                          setShowPresale(false);
                          setShowPasswordForm(true);
                          playSound(CLICK_SOUND_PATH, 0.5);
                        }}
                      >
                        Know the secret? Unlock higher cap
                      </Button>
                    </div>
                  )}
                </div>
                <div className="w-1/2 p-3 bg-background/50 rounded border border-primary/20">
                  <ContributionForm 
                    maxContribution={isPasswordVerified ? 3 : 0.5} 
                    tier={isPasswordVerified ? "core" : "public"} 
                  />
                </div>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  )
}

